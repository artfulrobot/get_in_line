<?php // vim: ft=php
/**
  * @file Get In Line module
  */

/** main doing function
 *
 * implements hook_entity_view_alter
 * Nb. this hook is called once the entity has had its fields added.
 *
 */
function get_in_line_entity_view_alter(&$data, &$context1, &$context2) {

    if (!empty($data['body'][0]['#markup'])) {
        GetInLine::go($data);
    }
}
/** Defines 'see get_in_line errors' permission 
 *
 * implements hook_permission
 */
function get_in_line_permission() /*{{{*/
{
  return array(
          'see get_in_line errors' => array(
              'title' => t('See get_in_line field name errors'),
              'description' => t('Without this permission, inline fields will just show blank if there is an error.'),
              ),
          );
}/*}}}*/

//class GetInLine {{{
/**
 * takes the main page content and substitutes in 'inline:field_name:N' for the field's html.
 * where N is the index (from 1) of the field. So inline:image:2 would be the 2nd image that exists as part of this page.
 *
  */
class GetInLine
{
	static protected $data;

    /** main calling function 
     */
	static public function go( &$data)
	{
		self::$data = &$data;
		self::$data['body'][0]['#markup'] = preg_replace_callback( 
            // find inline:fieldname:delta
            // and if enclosed in <p> tags, include those too.
            '/(?:<p>)?\binline:(\w+)(?::(\d)+)?\b(?:<\/p>)?/', 
			array( 'GetInLine', 'callback'), 
            self::$data['body'][0]['#markup']);
	}

    /** callback for preg_replace_callback
     *  
     *  returns the rendered field and removes the markup for that field.
     */
	public static function callback($matches)
	{
		$field_name = $matches[1];

        // if this field does not exist on the node, it's an author error
		if (!isset(self::$data['#node']->$field_name)) {
            return self::error("$field_name not found");
        }

        // if this field is not found rendered, it's probably that
        // this field should not display in this view mode, so remove the token.
		if (!isset(self::$data[$field_name])) {
            return '';
        }

        if (isset($matches[2]) && $matches[2]) $delta=$matches[2]-1;
        else $delta = 0;

        $field_index = $delta +1;

		$field = & self::$data[$field_name][$delta];
		if (!isset($field)) {
            // delta not found is a author error
			return self::error("{$field_index}st/nd/rd/th $field_name not found");
        }

		// insert the field and remove it.
		$markup = $field['#markup'];
		$field['#markup'] = '';
		return $markup;
	}

    /** Error as message and as inline field output if user has permission
     */
    static protected function error($message)
    {
        if (user_access('see get_in_line errors')) {
            drupal_set_message("'$field_name' not found",'error');
			return "<div style='background-color:red;padding:8px;' >$field_name not found</div>";
        }
        // without that permission, just hide the field.
        return '';
    }
}/*}}}*/
